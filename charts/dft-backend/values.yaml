# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/catenax-ng/tx-dft-backend
  pullPolicy: Always
  tag: "1.8.1"

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: true

probe:
  endpoint: "/api/ping"

service:
  type: ClusterIP
  port: 8080

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false


autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: DoesNotExist
          topologyKey: kubernetes.io/hostname

livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

ingress:
  enabled: false
  host: ""
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
    nginx.ingress.kubernetes.io/enable-cors: 'false'


dftpostgresql:
  enabled: true
  auth:
    username: "dftUser"
    database: "dftdb"
    existingSecret: dft-postgresql-secrets
    secretKeys:
      adminPasswordKey: "postgres-password"
      userPasswordKey: "password"

edcpostgresql:
  enabled: true
  auth:
    username: "edcUser"
    database: "edcdb"
    existingSecret: dft-postgresql-secrets
    secretKeys:
      adminPasswordKey: "postgres-password"
      userPasswordKey: "password"

edccontrolplane:
  enabled: true
  ingress:
  enabled: true
  hostname: ""
  # -- Additional ingress annotations to add
  annotations: {}
  # -- EDC endpoints exposed by this ingress resource
  endpoints:
    - ids
    - default
    - data
    - control
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
  className: "nginx"
  certManager:
    # -- If preset enables certificate generation via cert-manager namespace scoped issuer
    issuer: ""
    # -- If preset enables certificate generation via cert-manager cluster-wide issuer
    clusterIssuer: "letsencrypt-prod"
  configuration:
      # -- EDC configuration.properties configuring aspects of the [eclipse-dataspaceconnector](https://github.com/eclipse-dataspaceconnector/DataSpaceConnector)
    properties: |-
      edc.receiver.http.endpoint=
      edc.ids.title=Eclipse Dataspace Connector
      edc.ids.description=Eclipse Dataspace Connector
      edc.ids.id=urn:connector:edc
      edc.ids.security.profile=
      edc.ids.endpoint=
      edc.ids.maintainer=
      edc.ids.curator=
      edc.ids.catalog.id=urn:catalog:default
      ids.webhook.address=
      edc.api.control.auth.apikey.key=X-Api-Key
      edc.api.control.auth.apikey.value=pass
      edc.api.auth.key=password
      edc.hostname=
      # DAPS Properties
      edc.oauth.token.url=
      edc.oauth.client.id=
      edc.oauth.provider.audience=
      edc.oauth.provider.jwks.url=
      # OAUTH Properties
      edc.oauth.public.key.alias=
      edc.oauth.private.key.alias=
      # Azure vault related configuration
      edc.vault.clientid=
      edc.vault.tenantid=
      edc.vault.name=
      edc.vault.clientsecret=
      # Control- / Data- Plane configuration
      edc.ids.endpoint.audience=
      edc.data.encryption.keys.alias=
      edc.transfer.proxy.endpoint=
      edc.transfer.proxy.token.signer.privatekey.alias=
      edc.transfer.dataplane.sync.endpoint=
      edc.transfer.dataplane.token.signer.privatekey.alias=
      edc.transfer.proxy.token.verifier.publickey.alias=
      edc.public.key.alias=
      # Postgresql related configuration
      edc.datasource.asset.name=asset
      edc.datasource.asset.url=
      edc.datasource.asset.user=
      edc.datasource.asset.password=
      edc.datasource.contractdefinition.name=
      edc.datasource.contractdefinition.url=
      edc.datasource.contractdefinition.user=
      edc.datasource.contractdefinition.password=
      edc.datasource.contractnegotiation.name=
      edc.datasource.contractnegotiation.url=
      edc.datasource.contractnegotiation.user=
      edc.datasource.contractnegotiation.password=
      edc.datasource.policy.name=
      edc.datasource.policy.url=
      edc.datasource.policy.user=
      edc.datasource.policy.password=
      edc.datasource.transferprocess.name=
      edc.datasource.transferprocess.url=
      edc.datasource.transferprocess.user=
      edc.datasource.transferprocess.password=
edcdataplane:
  enabled: true
  ingress:
  enabled: true
  hostname: ""
  # -- Additional ingress annotations to add
  annotations: {}
  # -- EDC endpoints exposed by this ingress resource
  endpoints:
    - ids
    - default
    - data
    - control
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
  className: "nginx"
  certManager:
    # -- If preset enables certificate generation via cert-manager namespace scoped issuer
    issuer: ""
    # -- If preset enables certificate generation via cert-manager cluster-wide issuer
    clusterIssuer: "letsencrypt-prod"
  configuration:
    properties: |-
      edc.dataplane.token.validation.endpoint=
      edc.hostname=
      edc.vault.clientid=
      edc.vault.tenantid=
      edc.vault.name=
      edc.vault.clientsecret=
 
  

  

